setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(transclustr)
library(ggplot2)
library(plyr)
library(cluster)
library(gtools)
library(ClusterR)
library(stringi)
source("randomV2.R")
df_plot <- data.frame(similarity = integer(0), dataset = character())
table <- read.table("../data/big/simBig.txt", sep = "")
df_table <- as.data.frame(table)
proteins = levels(df_table[,1])
simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table) # Big data
rows <- length(proteins)^2
df_plot <- as.data.frame(cbind(as.vector(simMatrix), rep("Original", rows)))
names(df_plot) <- c("Similarity", "Dataset")
head(df_plot)
df_plot <- data.frame(similarity = integer(0), dataset = character())
table <- read.table("../data/big/simBig.txt", sep = "")
df_table <- as.data.frame(table)
proteins = levels(df_table[,1])
simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table) # Big data
rows <- length(proteins)^2
df_originalSim <- as.data.frame(cbind(as.vector(simMatrix), rep("Original", rows)))
names(df_originalSim) <- c("Similarity", "Dataset")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(transclustr)
library(ggplot2)
library(plyr)
library(cluster)
library(gtools)
library(ClusterR)
library(stringi)
source("randomV2.R")
df_plot <- data.frame(similarity = integer(0), dataset = character())
# Read in Original data
table <- read.table("../data/big/simBig.txt", sep = "")
df_table <- as.data.frame(table)
proteins = levels(df_table[,1])
simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table) # Big data
rows <- length(proteins)^2
df_plot <- as.data.frame(cbind(as.vector(simMatrix), rep("Original", rows)))
names(df_plot) <- c("Similarity", "Dataset")
source("randomV2.R")
df_plot <- data.frame(similarity = integer(0), dataset = character())
# Read in Original data
table <- read.table("../data/big/simBig.txt", sep = "")
df_table <- as.data.frame(table)
proteins = levels(df_table[,1])
simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table) # Big data
rows <- length(proteins)^2
df_plot <- as.data.frame(cbind(as.vector(simMatrix), rep("Original", rows)))
names(df_plot) <- c("Similarity", "Dataset")
df_plot <- data.frame(similarity = integer(0), dataset = character())
table <- read.table("../data/big/simBig.txt", sep = "")
df_table <- as.data.frame(table)
proteins = levels(df_table[,1])
simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table) # Big data
buildSimilarityMatrixFromBlast <- function(proteins, df_table) {
if (length(proteins) < 2) { stop("Cannot build similarity matrix with less than 2 proteins")}
# Create an empty matrix
simMatrix = matrix(0, nrow = length(proteins), ncol = length(proteins))
# Set row and column names for readability
row.names(simMatrix) = proteins
colnames(simMatrix) = proteins
# Extract the pairwise similarities
for(x in 1:(length(proteins)-1)) {
# Select all rows containing p1
p1 = proteins[x]
presec = df_table[df_table[,1] == p1 | df_table[,2] == p1, ]
for(y in (x+1):length(proteins)) {
p2 = proteins[y]
# We have to check for both directions p1 -> p2 and p2 <- p1. Rule is, to be more conservative, we take the minimum of both values
d1.set <- presec[presec[,1] == p2, 3]
d2.set <- presec[presec[,2] == p2, 3]
d1.length <- length(d1.set)
d2.length <- length(d2.set)
if (d1.length == 0 | d2.length == 0) {
#Allright, one value was missing, we take 0 as fallback (since there is no meaningful minimum)
simMatrix[x,y] = simMatrix[y,x] = 0
} else{
#Take the maximum of both directions
d1.maxValue <- 0
d2.maxValue <- 0
for (i in 1:d1.length) { # find d1.maxValue
if (d1.set[i] > d1.maxValue) {
d1.maxValue <- d1.set[i]
}
}
for (i in 1:d2.length) { # find d2.maxValue
if (d2.set[i] > d2.maxValue) {
d2.maxValue <- d2.set[i]
}
}
simMatrix[x,y] = simMatrix[y,x] = min(d1.maxValue, d2.maxValue)
}
}
}
# Set the diagonal to the highest observed value (not actually necessary, since self-similarity is never queried)
# diag(simMatrix) = max(simMatrix)
return(simMatrix)
}
simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table) # Big data
rows <- length(proteins)^2
df_plot <- as.data.frame(cbind(as.vector(simMatrix), rep("Original", rows)))
names(df_plot) <- c("Similarity", "Dataset")
dimension <- 10
seed <- 42
simRandom <- buildRandomSimMatrixAp2(proteins, simMatrix, dimension, seed)
df_randomSim <- as.data.frame(cbind(as.vector(simRandom), rep("Random", rows)))
names(df_randomSim) <- names
df_plot <- rbind(df_plot, df_randomSim)
head(df_randomSim)
names(df_randomSim) <- names
df_plot <- rbind(df_plot, df_randomSim)
names(df_randomSim) <- c("Similarity", "Dataset")
colNames <- c("Similarity", "Dataset")
names(df_randomSim) <- colNames
head(df_randomSim)
buildSimilarityMatrixFromBlast <- function(proteins, df_table) {
if (length(proteins) < 2) { stop("Cannot build similarity matrix with less than 2 proteins")}
# Create an empty matrix
simMatrix = matrix(0, nrow = length(proteins), ncol = length(proteins))
# Set row and column names for readability
row.names(simMatrix) = proteins
colnames(simMatrix) = proteins
# Extract the pairwise similarities
for(x in 1:(length(proteins)-1)) {
# Select all rows containing p1
p1 = proteins[x]
presec = df_table[df_table[,1] == p1 | df_table[,2] == p1, ]
for(y in (x+1):length(proteins)) {
p2 = proteins[y]
# We have to check for both directions p1 -> p2 and p2 <- p1. Rule is, to be more conservative, we take the minimum of both values
d1.set <- presec[presec[,1] == p2, 3]
d2.set <- presec[presec[,2] == p2, 3]
d1.length <- length(d1.set)
d2.length <- length(d2.set)
if (d1.length == 0 | d2.length == 0) {
#Allright, one value was missing, we take 0 as fallback (since there is no meaningful minimum)
simMatrix[x,y] = simMatrix[y,x] = 0
} else{
#Take the maximum of both directions
d1.maxValue <- 0
d2.maxValue <- 0
for (i in 1:d1.length) { # find d1.maxValue
if (d1.set[i] > d1.maxValue) {
d1.maxValue <- d1.set[i]
}
}
for (i in 1:d2.length) { # find d2.maxValue
if (d2.set[i] > d2.maxValue) {
d2.maxValue <- d2.set[i]
}
}
simMatrix[x,y] = simMatrix[y,x] = min(d1.maxValue, d2.maxValue)
}
}
}
# Set the diagonal to the highest observed value (not actually necessary, since self-similarity is never queried)
# diag(simMatrix) = max(simMatrix)
return(simMatrix)
}
buildSimilarityMatrix <- function(proteins, df_table) {
if (length(proteins) < 2) { stop("Cannot build similarity matrix with less than 2 proteins")}
# Create an empty matrix
simMatrix = matrix(0, nrow = length(proteins), ncol = length(proteins))
# Set row and column names for readability
row.names(simMatrix) = proteins
colnames(simMatrix) = proteins
# Extract the pairwise similarities
for(x in 1:(length(proteins)-1)){
# Select all rows containing p1
p1 = proteins[x]
presec = df_table[df_table[,1] == p1 | df_table[,2] == p1, ]
for(y in (x+1):length(proteins)){
p2 = proteins[y]
# We have to check for both directions p1 -> p2 and p2 <- p1. Rule is, to be more conservative, we take the minimum of both values
if(length(presec[presec[,1] == p2, 3])==0 | length(presec[presec[,2] == p2, 3])==0){
#Allright, one value was missing, we take 0 as fallback (since there is no meaningful minimum)
simMatrix[x,y] = simMatrix[y,x] = 0
}else{
#Take the minimum of both directions
simMatrix[x,y] = simMatrix[y,x] = min(presec[presec[,1] == p2, 3], presec[presec[,2] == p2, 3])
}
}
}
# Set the diagonal to the highest observed value (not actually necessary, since self-similarity is never queried)
# diag(simMatrix) = max(simMatrix)
return(simMatrix)
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(transclustr)
library(ggplot2)
library(plyr)
library(cluster)
library(gtools)
library(ClusterR)
library(stringi)
source("randomV2.R")
colNames <- c("Similarity", "Dataset")
df_plot <- data.frame(similarity = integer(0), dataset = character())
# Read in Original data
table <- read.table("../data/big/simBig.txt", sep = "")
df_table <- as.data.frame(table)
proteins = levels(df_table[,1])
simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table) # Big data
rows <- length(proteins)^2
df_plot <- as.data.frame(cbind(as.vector(simMatrix), rep("Original", rows)))
names(df_plot) <-  names
names(df_plot) <-  colNames
dimension <- 10
seed <- 42
simRandom <- buildRandomSimMatrixAp2(proteins, simMatrix, dimension, seed)
df_randomSim <- as.data.frame(cbind(as.vector(simRandom), rep("Random", rows)))
names(df_randomSim) <- colNames
df_plot <- rbind(df_plot, df_randomSim)
nrows(df_plot)
nrow(df_plot)
g <- ggplot(df_plot, aes(x = Similarity, color = Dataset)) + geom_histogram(fill="white", alpha=0.5)
g
?geom_histogram
g <- ggplot(df_plot, aes(x = Similarity, color = Dataset)) + geom_histogram(fill="white", alpha=0.5, stat = "count")
g
g <- ggplot(df_plot, aes(x = Similarity, color = Dataset)) + geom_histogram(fill="white", alpha=0.5, stat = "count", binwidth = 10)
g
g <- ggplot(df_plot, aes(x = Similarity, fill = Dataset)) + geom_histogram(binwidth = 10) + xlab("Similarity") + ylab("Count") + labs(fill = Dataset)
g <- ggplot(df_plot, aes(x = Similarity, fill = Dataset)) + geom_histogram(binwidth = 10) + xlab("Similarity") + ylab("Count") + labs(fill = "Dataset")
g
g <- ggplot(df_plot, aes(x = Similarity, fill = Dataset)) + geom_histogram(binwidth = 10, stat = "count") + xlab("Similarity") + ylab("Count") + labs(fill = "Dataset")
g <- ggplot(df_plot, aes(x = Similarity, fill = Dataset)) + geom_col(binwidth = 10, stat = "count") + xlab("Similarity") + ylab("Count") + labs(fill = "Dataset")
?geom_col
g <- ggplot(df_plot, aes(x = Similarity, fill = Dataset)) + geom_col() + xlab("Similarity") + ylab("Count") + labs(fill = "Dataset")
g
g <- ggplot(df_plot, aes(x = Similarity, fill = Dataset)) + geom_histogram() + xlab("Similarity") + ylab("Count") + labs(fill = "Dataset")
g
g <- ggplot(df_plot, aes(x = Similarity, fill = Dataset)) + geom_histogram(stat = "count") + xlab("Similarity") + ylab("Count") + labs(fill = "Dataset")
g
g <- ggplot(df_plot, aes(x = Similarity, fill = Dataset)) + geom_bar(stat = "count") + xlab("Similarity") + ylab("Count") + labs(fill = "Dataset")
g
g <- ggplot(data = df_plot, aes(df_plot$Similarity)) + geom_histogram()
g
g <- ggplot(data = df_plot, aes(df_plot$Similarity)) + geom_bar()
g
g <- ggplot(data = df_plot[1:10,], aes(df_plot$Similarity)) + geom_bar()
g
g <- ggplot(data = df_plot[1:10,], aes(df_plot[1:10,]$Similarity)) + geom_bar()
g
g <- ggplot(data = df_plot[1:1000,], aes(df_plot[1:1000,]$Similarity)) + geom_bar()
g
geom_bar()
?geom_bar
g <- ggplot(data = df_plot[1:1000,], aes(df_plot[1:1000,]$Similarity)) + geom_bar(bindwidth = 10)
g
g <- ggplot(data = df_plot[1:1000,], aes(df_plot[1:1000,]$Similarity)) + geom_bar(width = 50)
g
g <- ggplot(data = df_plot[1:1000,], aes(df_plot[1:1000,]$Similarity)) + geom_bar(width = 10)
g
g <- ggplot(data = df_plot[1:1000,], aes(df_plot[1:1000,]$Similarity), color = Dataset) + geom_bar(width = 10)
g
g <- ggplot(data = df_plot[1:100000,], aes(df_plot[1:100000,]$Similarity), color = Dataset) + geom_bar(width = 10)
g
g <- ggplot(data = df_plot[1:100000,], aes(df_plot[1:100000,]$Similarity)) + geom_bar(width = 10)
g
g <- ggplot(data = df_plot[1:100000,], aes(df_plot[1:100000,]$Similarity)) + geom_bar(stat = "identity", width = 10)
g
g <- ggplot(data = df_plot[1:100000,], aes(df_plot[1:100000,]$Similarity)) + geom_bar(width = 10) + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:1000,], aes(df_plot[1:1000,]$Similarity)) + geom_bar(width = 10) + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:1000,], aes(x = Similarity)) + geom_bar(width = 10) + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:1000,], aes(x = Similarity), color = Dataset) + geom_bar(width = 10) + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = rbind(df_plot[1:1000,], df_plot[rows+1:rows+1000,]), aes(x = Similarity), color = Dataset) + geom_bar(width = 10) + theme(axis.text.x = element_text(angle = 90))
g <- ggplot(data = rbind(df_plot[1:1000,], df_plot[rows+1:rows+1000,]), aes(x = Similarity), color = Dataset) + geom_bar(width = 10) + theme(axis.text.x = element_text(angle = 90))
g <- ggplot(data = rbind(df_plot[1:1000,], df_plot[rows+1:rows+1000,]), aes(x = Similarity), color = Dataset) + geom_bar(width = 10) + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:1000,], aes(x = Similarity), color = Dataset) + geom_bar(width = 10) + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:1000,], aes(x = Similarity, width = 20), color = Dataset) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:1000,], aes(x = Similarity, width = 20, fill = Dataset)) + geom_bar(stat = "identity", position = "identity") + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:1000,], aes(x = Similarity, width = 20, fill = Dataset)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:100000,], aes(x = Similarity, width = 20, fill = Dataset)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:100000,], aes(x = Similarity, width = 100, fill = Dataset)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:10000,], aes(x = Similarity, width = 100, fill = Dataset)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot[1:1000,], aes(x = Similarity, width = 100, fill = Dataset)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
mpg
g <- ggplot(data = df_plot, aes(Similarity)) + geom_bar()
g
g <- ggplot(data = df_plot[1:1000, ], aes(Similarity)) + geom_histogram(binwidth = 50)
g
g <- ggplot(data = df_plot[1:1000, ], aes(Similarity)) + geom_histogram(binwidth = 50, stat = "count")
g <- ggplot(data = df_plot[1:1000, ], aes(Similarity)) + geom_histogram(stat = "count")
g
ggplot(aes(x=tableHeaderValues, y=tableSimMatrix)) +
geom_bar(stat="identity", color="black", width=1) +
theme(axis.text.x=element_text(angle=90, hjust=1), legend.position="none")
df <- as.data.frame(cbind(rep(1, rows), rep("Original", rows)))
df <- rbind(df, as.data.frame(rep(2, rows), rep("Random", rows)))
df <- rbind(df, as.data.frame(cbind(rep(2, rows), rep("Random", rows))))
g <- ggplot(data = df, aes(x = Similarity, width = 100, fill = Dataset)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
names(df) <- colNames
g <- ggplot(data = df, aes(x = Similarity, width = 100, fill = Dataset)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
df <- as.data.frame(cbind(rep(1, rows/2), rep("Original", rows)))
df <- rbind(df, as.data.frame(cbind(rep(2, rows/2), rep("Original", rows))))
df <- rbind(df, as.data.frame(cbind(rep(3, rows/2), rep("Random", rows))))
df <- rbind(df, as.data.frame(cbind(rep(4, rows/2), rep("Random", rows))))
names(df) <- colNames
g <- ggplot(data = df, aes(x = Similarity, width = 100, fill = Dataset)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df, aes(x = Similarity, fill = Dataset)) + geom_histogram(binwidth = 10) + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df, aes(x = Similarity, fill = Dataset)) + geom_histogram(binwidth = 10, stat = "count") + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df, aes(x = Similarity, fill = Dataset)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
g <- ggplot(data = df_plot, aes(x = Similarity, fill = Dataset)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))
g
g
