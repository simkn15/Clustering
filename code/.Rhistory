sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, difference = costDiff, Avg = costDiffScaledAverage, AvgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : orignal vs. randomized")
g <- ggplot() +
xlab("Threshold") +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 2)}) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
ggtitle(title) +
theme(legend.position = "bottom") + scale_fill_manual("gse")
g <- add_sub(g, "Black point indicates conversion from negative to positive value.")
return(ggdraw(g))
}
g <- plotCostDifference(hc$gap)
g
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, difference = costDiff, Avg = costDiffScaledAverage, AvgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : orignal vs. randomized")
g <- ggplot() +
xlab("Threshold") +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 2)}) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
ggtitle(title) +
theme(legend.position = "bottom")
g <- add_sub(g, "Black point indicates conversion from negative to positive value.")
return(ggdraw(g))
}
plot(hc$hc, hang = -1, xlab = "Protein", ylab = "Height")
g <- plotCostDifference(hc$gap)
g
pdf("yollo")
print(g)
dev.off()
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, difference = costDiff, Avg = costDiffScaledAverage, AvgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : orignal vs. randomized")
g <- ggplot() +
xlab("Threshold") +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 2)}) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
ggtitle(title)
# +theme(legend.position = "bottom")
g <- add_sub(g, "Black point indicates conversion from negative to positive value.")
return(ggdraw(g))
}
g <- plotCostDifference(hc$gap)
g
pdf("yollo")
print(g)
dev.off()
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, difference = costDiff, avg = costDiffScaledAverage, avgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : orignal vs. randomized")
g <- ggplot() +
xlab("Threshold") +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 2)}) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
ggtitle(title)
# +theme(legend.position = "bottom")
g <- add_sub(g, "Black point indicates conversion from negative to positive value.")
return(ggdraw(g))
}
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, difference = costDiff, avg = costDiffScaledAverage, avgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : orignal vs. randomized")
g <- ggplot() +
xlab("Threshold") +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 2)}) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
ggtitle(title)
+theme(legend.position = "bottom")
g <- add_sub(g, "Black point indicates conversion from negative to positive value.")
return(ggdraw(g))
}
g <- plotCostDifference(hc$gap)
g
pdf("yollo")
function (x, what, which = FALSE)
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, difference = costDiff, avg = costDiffScaledAverage, avgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : orignal vs. randomized")
g <- ggplot() +
xlab("Threshold") +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 2)}) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
ggtitle(title) +
theme(legend.position = "bottom")
g <- add_sub(g, "Black point indicates conversion from negative to positive value.")
return(ggdraw(g))
}
g <- plotCostDifference(hc$gap)
g
pdf("yollo")
print(g)
dev.off()
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, difference = costDiff, avg = costDiffScaledAverage, avgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : orignal vs. randomized")
g <- ggplot() +
xlab("Threshold") +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 2)}) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
ggtitle(title) +
theme(legend.position = "bottom")
g <- add_sub(g, "Black point on foldChange indicates conversion from negative to positive value.")
return(ggdraw(g))
}
g <- plotCostDifference(hc$gap)
g
pdf("yollo")
print(g)
dev.off()
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, difference = costDiff, avg = costDiffScaledAverage, avgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : orignal vs. randomized")
g <- ggplot() +
xlab("Threshold") +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 2)}) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
ggtitle(title) +
theme(legend.position = "bottom")
g <- add_sub(g, "Black point on foldChange is conversion from negative to positive value.")
return(ggdraw(g))
}
g <- plotCostDifference(hc$gap)
g
pdf("yollo")
print(g)
dev.off()
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, difference = costDiff, avg = costDiffScaledAverage, avgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : orignal vs. randomized")
g <- ggplot() +
xlab("Threshold") +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 2)}) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
ggtitle(title) +
theme(legend.position = "bottom")
g <- add_sub(g, "Black point on foldChange is conversion from negative to positive.")
return(ggdraw(g))
}
g <- plotCostDifference(hc$gap)
g
pdf("yollo")
print(g)
dev.off()
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, difference = costDiff, avg = costDiffScaledAverage, avgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : orignal vs. randomized")
g <- ggplot() +
xlab("Threshold") +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 2)}) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
ggtitle(title) +
theme(legend.position = "bottom")
g <- add_sub(g, "Black point on foldChange is conversion from negative to positive.")
return(ggdraw(g))
}
g <- plotCostDifference(hc$gap)
g
pdf("yollo")
print(g)
dev.off()
1+1
