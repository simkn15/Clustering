end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
timeTaken <- paste0("Total time for clustering: ", time.taken, " minutes")
if (writeToFile) {
write(stringTwo, file, append = TRUE)
write(stringThree, file, append = TRUE)
write(timeTaken, file, append = TRUE)
close(file)
}
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# library(transclustr)
# library(ggplot2)
# library(plyr)
# library(cluster)
# library(gtools)
# library(ClusterR)
# library(stringi)
#round(x, digits = 0)
source("fmeasure.R")
source("utilities.R")
####################################################################################################
# Read in data and build similarity matrix
####################################################################################################
table <- read.table("sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh.txt", sep = "", skip = 5)
df_table <- as.data.frame(table)
# Get the involved proteins
proteins = levels(df_table[,1])
# Build similarity matrix
simMatrix <- buildSimilarityMatrix(proteins, df_table)
##########
# Read in the gold standard data
##########
gold_df_before_split <- as.data.frame(readLines("sfld_brown_et_al_amidohydrolases_families_gold_standard.txt"))
gold <- as.data.frame(stri_split_fixed(gold_df_before_split[,1], "\t", simplify = TRUE))
# Set names on columns
colnames(gold) <- c("proteins", "class")
# Sort the gold standard to match the sorting of the dataset
gold_sorted <- gold[match(proteins,gold$proteins),]
# Convert classes into unique numeric values
gsClusteringDataFrame <- as.numeric(as.factor(gold_sorted$class))
####################################################################################################
# Cluster
####################################################################################################
writeToFile <- TRUE
simRandom <- TRUE
if (writeToFile && !simRandom) { file <- file("output.txt", "w") }
if (writeToFile && simRandom) { file <- file("outputRandomV6.txt", "w") }
if (simRandom) {
# test_dist = as.vector(simMatrix)
# simMatrix <- matrix(sample(x=test_dist, replace = TRUE, size = length(test_dist)), nrow = length(proteins), ncol = length(proteins))
# test <- matrix(1:50, nrow = 10, ncol = 10, byrow = TRUE)
vec <- simMatrix[upper.tri(simMatrix)]
simTemp <- matrix(-1, nrow = length(proteins), ncol = length(proteins))
rand <- sample(x = vec, replace = TRUE, size = length(vec))
simTemp[upper.tri(simTemp)] = rand
simTemp <- t(simTemp)
simTemp[upper.tri(simTemp)] = rand
simMatrix <- simTemp
}
start.time <- Sys.time()
bestClustering <- list(threshold = 0, fmeasure = 0.0, clusters = 0, cost = 0.0, common = 0)
for (threshold in seq(-1, 100, 1)) {
tclustResult <- tclust(simmatrix = simMatrix, convert_dissimilarity_to_similarity = FALSE, threshold = threshold)
tclustResultDataFrame <- data.frame(protein = proteins, cluster = tclustResult$clusters[[1]])
# ## Add 1 to all classes to match first class = 1 in gold standard
tclustResultDataFrame$cluster = tclustResultDataFrame$cluster + 1
# fmeasure <- getQualityOfClustering(clusteringResultDataFrame, gsClusteringDataFrame)
fmeasure <- getQualityOfClustering(tclustResultDataFrame$cluster, gsClusteringDataFrame)
clusters <- length(table(tclustResultDataFrame$cluster))
cost <- tclustResult$costs[[1]]
stringOne <- paste0( "Threshold = ", threshold, " | F-measure = ", round(fmeasure$fmeasure, 7), " | clusters = ", clusters, " | common = ", fmeasure$common, " | cost = ", cost)
print(stringOne)
if (writeToFile) { write(stringOne, file, append = TRUE) }
if (fmeasure$fmeasure > bestClustering$fmeasure) {
bestClustering$fmeasure <- fmeasure$fmeasure
bestClustering$threshold <- threshold
bestClustering$clusters <- clusters
bestClustering$cost <- cost
bestClustering$common <- fmeasure$common
}
}
stringTwo <- paste("Best Clustering:")
print(stringTwo)
stringThree <- paste0("Threshold = ", bestClustering$threshold, " | F-measure = ", round(bestClustering$fmeasure, 7), " | clusters = ", bestClustering$clusters, " | common = ", bestClustering$common, " | cost = ", bestClustering$cost)
print(stringThree)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
timeTaken <- paste0("Total time for clustering: ", time.taken, " minutes")
if (writeToFile) {
write(stringTwo, file, append = TRUE)
write(stringThree, file, append = TRUE)
write(timeTaken, file, append = TRUE)
close(file)
}
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# library(transclustr)
# library(ggplot2)
# library(plyr)
# library(cluster)
# library(gtools)
# library(ClusterR)
# library(stringi)
#round(x, digits = 0)
source("fmeasure.R")
source("utilities.R")
####################################################################################################
# Read in data and build similarity matrix
####################################################################################################
table <- read.table("sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh.txt", sep = "", skip = 5)
df_table <- as.data.frame(table)
# Get the involved proteins
proteins = levels(df_table[,1])
# Build similarity matrix
simMatrix <- buildSimilarityMatrix(proteins, df_table)
##########
# Read in the gold standard data
##########
gold_df_before_split <- as.data.frame(readLines("sfld_brown_et_al_amidohydrolases_families_gold_standard.txt"))
gold <- as.data.frame(stri_split_fixed(gold_df_before_split[,1], "\t", simplify = TRUE))
# Set names on columns
colnames(gold) <- c("proteins", "class")
# Sort the gold standard to match the sorting of the dataset
gold_sorted <- gold[match(proteins,gold$proteins),]
# Convert classes into unique numeric values
gsClusteringDataFrame <- as.numeric(as.factor(gold_sorted$class))
####################################################################################################
# Cluster
####################################################################################################
writeToFile <- TRUE
simRandom <- TRUE
if (writeToFile && !simRandom) { file <- file("output.txt", "w") }
if (writeToFile && simRandom) { file <- file("outputRandomV7.txt", "w") }
if (simRandom) {
vec <- simMatrix[upper.tri(simMatrix)]
simTemp <- matrix(-1, nrow = length(proteins), ncol = length(proteins))
rand <- sample(x = vec, replace = TRUE, size = length(vec))
simTemp[upper.tri(simTemp)] = rand
simTemp <- t(simTemp)
simTemp[upper.tri(simTemp)] = rand
simMatrix <- simTemp
}
start.time <- Sys.time()
bestClustering <- list(threshold = 0, fmeasure = 0.0, clusters = 0, cost = 0.0, common = 0)
for (threshold in seq(-1, 100, 1)) {
tclustResult <- tclust(simmatrix = simMatrix, convert_dissimilarity_to_similarity = FALSE, threshold = threshold)
tclustResultDataFrame <- data.frame(protein = proteins, cluster = tclustResult$clusters[[1]])
# ## Add 1 to all classes to match first class = 1 in gold standard
tclustResultDataFrame$cluster = tclustResultDataFrame$cluster + 1
# fmeasure <- getQualityOfClustering(clusteringResultDataFrame, gsClusteringDataFrame)
fmeasure <- getQualityOfClustering(tclustResultDataFrame$cluster, gsClusteringDataFrame)
clusters <- length(table(tclustResultDataFrame$cluster))
cost <- tclustResult$costs[[1]]
stringOne <- paste0( "Threshold = ", threshold, " | F-measure = ", round(fmeasure$fmeasure, 7), " | clusters = ", clusters, " | common = ", fmeasure$common, " | cost = ", cost)
print(stringOne)
if (writeToFile) { write(stringOne, file, append = TRUE) }
if (fmeasure$fmeasure > bestClustering$fmeasure) {
bestClustering$fmeasure <- fmeasure$fmeasure
bestClustering$threshold <- threshold
bestClustering$clusters <- clusters
bestClustering$cost <- cost
bestClustering$common <- fmeasure$common
}
}
stringTwo <- paste("Best Clustering:")
print(stringTwo)
stringThree <- paste0("Threshold = ", bestClustering$threshold, " | F-measure = ", round(bestClustering$fmeasure, 7), " | clusters = ", bestClustering$clusters, " | common = ", bestClustering$common, " | cost = ", bestClustering$cost)
print(stringThree)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
timeTaken <- paste0("Total time for clustering: ", time.taken, " minutes")
if (writeToFile) {
write(stringTwo, file, append = TRUE)
write(stringThree, file, append = TRUE)
write(timeTaken, file, append = TRUE)
close(file)
}
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# library(transclustr)
# library(ggplot2)
# library(plyr)
# library(cluster)
# library(gtools)
# library(ClusterR)
# library(stringi)
#round(x, digits = 0)
source("fmeasure.R")
source("utilities.R")
####################################################################################################
# Read in data and build similarity matrix
####################################################################################################
table <- read.table("sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh.txt", sep = "", skip = 5)
df_table <- as.data.frame(table)
# Get the involved proteins
proteins = levels(df_table[,1])
# Build similarity matrix
simMatrix <- buildSimilarityMatrix(proteins, df_table)
##########
# Read in the gold standard data
##########
gold_df_before_split <- as.data.frame(readLines("sfld_brown_et_al_amidohydrolases_families_gold_standard.txt"))
gold <- as.data.frame(stri_split_fixed(gold_df_before_split[,1], "\t", simplify = TRUE))
# Set names on columns
colnames(gold) <- c("proteins", "class")
# Sort the gold standard to match the sorting of the dataset
gold_sorted <- gold[match(proteins,gold$proteins),]
# Convert classes into unique numeric values
gsClusteringDataFrame <- as.numeric(as.factor(gold_sorted$class))
####################################################################################################
# Cluster
####################################################################################################
writeToFile <- TRUE
simRandom <- TRUE
if (writeToFile && !simRandom) { file <- file("output.txt", "w") }
if (writeToFile && simRandom) { file <- file("outputRandomV8.txt", "w") }
if (simRandom) {
vec <- simMatrix[upper.tri(simMatrix)]
simTemp <- matrix(-1, nrow = length(proteins), ncol = length(proteins))
rand <- sample(x = vec, replace = TRUE, size = length(vec))
simTemp[upper.tri(simTemp)] = rand
simTemp <- t(simTemp)
simTemp[upper.tri(simTemp)] = rand
simMatrix <- simTemp
}
start.time <- Sys.time()
bestClustering <- list(threshold = 0, fmeasure = 0.0, clusters = 0, cost = 0.0, common = 0)
for (threshold in seq(-1, 100, 1)) {
tclustResult <- tclust(simmatrix = simMatrix, convert_dissimilarity_to_similarity = FALSE, threshold = threshold)
tclustResultDataFrame <- data.frame(protein = proteins, cluster = tclustResult$clusters[[1]])
# ## Add 1 to all classes to match first class = 1 in gold standard
tclustResultDataFrame$cluster = tclustResultDataFrame$cluster + 1
# fmeasure <- getQualityOfClustering(clusteringResultDataFrame, gsClusteringDataFrame)
fmeasure <- getQualityOfClustering(tclustResultDataFrame$cluster, gsClusteringDataFrame)
clusters <- length(table(tclustResultDataFrame$cluster))
cost <- tclustResult$costs[[1]]
stringOne <- paste0( "Threshold = ", threshold, " | F-measure = ", round(fmeasure$fmeasure, 7), " | clusters = ", clusters, " | common = ", fmeasure$common, " | cost = ", cost)
print(stringOne)
if (writeToFile) { write(stringOne, file, append = TRUE) }
if (fmeasure$fmeasure > bestClustering$fmeasure) {
bestClustering$fmeasure <- fmeasure$fmeasure
bestClustering$threshold <- threshold
bestClustering$clusters <- clusters
bestClustering$cost <- cost
bestClustering$common <- fmeasure$common
}
}
stringTwo <- paste("Best Clustering:")
print(stringTwo)
stringThree <- paste0("Threshold = ", bestClustering$threshold, " | F-measure = ", round(bestClustering$fmeasure, 7), " | clusters = ", bestClustering$clusters, " | common = ", bestClustering$common, " | cost = ", bestClustering$cost)
print(stringThree)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
timeTaken <- paste0("Total time for clustering: ", time.taken, " minutes")
if (writeToFile) {
write(stringTwo, file, append = TRUE)
write(stringThree, file, append = TRUE)
write(timeTaken, file, append = TRUE)
close(file)
}
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# library(transclustr)
# library(ggplot2)
# library(plyr)
# library(cluster)
# library(gtools)
# library(ClusterR)
# library(stringi)
#round(x, digits = 0)
source("fmeasure.R")
source("utilities.R")
####################################################################################################
# Read in data and build similarity matrix
####################################################################################################
table <- read.table("sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh.txt", sep = "", skip = 5)
df_table <- as.data.frame(table)
# Get the involved proteins
proteins = levels(df_table[,1])
# Build similarity matrix
simMatrix <- buildSimilarityMatrix(proteins, df_table)
##########
# Read in the gold standard data
##########
gold_df_before_split <- as.data.frame(readLines("sfld_brown_et_al_amidohydrolases_families_gold_standard.txt"))
gold <- as.data.frame(stri_split_fixed(gold_df_before_split[,1], "\t", simplify = TRUE))
# Set names on columns
colnames(gold) <- c("proteins", "class")
# Sort the gold standard to match the sorting of the dataset
gold_sorted <- gold[match(proteins,gold$proteins),]
# Convert classes into unique numeric values
gsClusteringDataFrame <- as.numeric(as.factor(gold_sorted$class))
####################################################################################################
# Cluster
####################################################################################################
writeToFile <- TRUE
simRandom <- TRUE
if (writeToFile && !simRandom) { file <- file("output.txt", "w") }
if (writeToFile && simRandom) { file <- file("outputRandomV9.txt", "w") }
if (simRandom) {
vec <- simMatrix[upper.tri(simMatrix)]
simTemp <- matrix(-1, nrow = length(proteins), ncol = length(proteins))
rand <- sample(x = vec, replace = TRUE, size = length(vec))
simTemp[upper.tri(simTemp)] = rand
simTemp <- t(simTemp)
simTemp[upper.tri(simTemp)] = rand
simMatrix <- simTemp
}
start.time <- Sys.time()
bestClustering <- list(threshold = 0, fmeasure = 0.0, clusters = 0, cost = 0.0, common = 0)
for (threshold in seq(-1, 100, 1)) {
tclustResult <- tclust(simmatrix = simMatrix, convert_dissimilarity_to_similarity = FALSE, threshold = threshold)
tclustResultDataFrame <- data.frame(protein = proteins, cluster = tclustResult$clusters[[1]])
# ## Add 1 to all classes to match first class = 1 in gold standard
tclustResultDataFrame$cluster = tclustResultDataFrame$cluster + 1
# fmeasure <- getQualityOfClustering(clusteringResultDataFrame, gsClusteringDataFrame)
fmeasure <- getQualityOfClustering(tclustResultDataFrame$cluster, gsClusteringDataFrame)
clusters <- length(table(tclustResultDataFrame$cluster))
cost <- tclustResult$costs[[1]]
stringOne <- paste0( "Threshold = ", threshold, " | F-measure = ", round(fmeasure$fmeasure, 7), " | clusters = ", clusters, " | common = ", fmeasure$common, " | cost = ", cost)
print(stringOne)
if (writeToFile) { write(stringOne, file, append = TRUE) }
if (fmeasure$fmeasure > bestClustering$fmeasure) {
bestClustering$fmeasure <- fmeasure$fmeasure
bestClustering$threshold <- threshold
bestClustering$clusters <- clusters
bestClustering$cost <- cost
bestClustering$common <- fmeasure$common
}
}
stringTwo <- paste("Best Clustering:")
print(stringTwo)
stringThree <- paste0("Threshold = ", bestClustering$threshold, " | F-measure = ", round(bestClustering$fmeasure, 7), " | clusters = ", bestClustering$clusters, " | common = ", bestClustering$common, " | cost = ", bestClustering$cost)
print(stringThree)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
timeTaken <- paste0("Total time for clustering: ", time.taken, " minutes")
if (writeToFile) {
write(stringTwo, file, append = TRUE)
write(stringThree, file, append = TRUE)
write(timeTaken, file, append = TRUE)
close(file)
}
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# library(transclustr)
# library(ggplot2)
# library(plyr)
# library(cluster)
# library(gtools)
# library(ClusterR)
# library(stringi)
#round(x, digits = 0)
source("fmeasure.R")
source("utilities.R")
####################################################################################################
# Read in data and build similarity matrix
####################################################################################################
table <- read.table("sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh.txt", sep = "", skip = 5)
df_table <- as.data.frame(table)
# Get the involved proteins
proteins = levels(df_table[,1])
# Build similarity matrix
simMatrix <- buildSimilarityMatrix(proteins, df_table)
##########
# Read in the gold standard data
##########
gold_df_before_split <- as.data.frame(readLines("sfld_brown_et_al_amidohydrolases_families_gold_standard.txt"))
gold <- as.data.frame(stri_split_fixed(gold_df_before_split[,1], "\t", simplify = TRUE))
# Set names on columns
colnames(gold) <- c("proteins", "class")
# Sort the gold standard to match the sorting of the dataset
gold_sorted <- gold[match(proteins,gold$proteins),]
# Convert classes into unique numeric values
gsClusteringDataFrame <- as.numeric(as.factor(gold_sorted$class))
####################################################################################################
# Cluster
####################################################################################################
writeToFile <- TRUE
simRandom <- TRUE
if (writeToFile && !simRandom) { file <- file("output.txt", "w") }
if (writeToFile && simRandom) { file <- file("outputRandomV10.txt", "w") }
if (simRandom) {
vec <- simMatrix[upper.tri(simMatrix)]
simTemp <- matrix(-1, nrow = length(proteins), ncol = length(proteins))
rand <- sample(x = vec, replace = TRUE, size = length(vec))
simTemp[upper.tri(simTemp)] = rand
simTemp <- t(simTemp)
simTemp[upper.tri(simTemp)] = rand
simMatrix <- simTemp
}
start.time <- Sys.time()
bestClustering <- list(threshold = 0, fmeasure = 0.0, clusters = 0, cost = 0.0, common = 0)
for (threshold in seq(-1, 100, 1)) {
tclustResult <- tclust(simmatrix = simMatrix, convert_dissimilarity_to_similarity = FALSE, threshold = threshold)
tclustResultDataFrame <- data.frame(protein = proteins, cluster = tclustResult$clusters[[1]])
# ## Add 1 to all classes to match first class = 1 in gold standard
tclustResultDataFrame$cluster = tclustResultDataFrame$cluster + 1
# fmeasure <- getQualityOfClustering(clusteringResultDataFrame, gsClusteringDataFrame)
fmeasure <- getQualityOfClustering(tclustResultDataFrame$cluster, gsClusteringDataFrame)
clusters <- length(table(tclustResultDataFrame$cluster))
cost <- tclustResult$costs[[1]]
stringOne <- paste0( "Threshold = ", threshold, " | F-measure = ", round(fmeasure$fmeasure, 7), " | clusters = ", clusters, " | common = ", fmeasure$common, " | cost = ", cost)
print(stringOne)
if (writeToFile) { write(stringOne, file, append = TRUE) }
if (fmeasure$fmeasure > bestClustering$fmeasure) {
bestClustering$fmeasure <- fmeasure$fmeasure
bestClustering$threshold <- threshold
bestClustering$clusters <- clusters
bestClustering$cost <- cost
bestClustering$common <- fmeasure$common
}
}
stringTwo <- paste("Best Clustering:")
print(stringTwo)
stringThree <- paste0("Threshold = ", bestClustering$threshold, " | F-measure = ", round(bestClustering$fmeasure, 7), " | clusters = ", bestClustering$clusters, " | common = ", bestClustering$common, " | cost = ", bestClustering$cost)
print(stringThree)
end.time <- Sys.time()
time.taken <- end.time - start.time
time.taken
timeTaken <- paste0("Total time for clustering: ", time.taken, " minutes")
if (writeToFile) {
write(stringTwo, file, append = TRUE)
write(stringThree, file, append = TRUE)
write(timeTaken, file, append = TRUE)
close(file)
}
simMatrix <- matrix(1:100, nrow = 10, ncol = 10)
simMatrix
vec <- simMatrix[upper.tri(simMatrix)]
simTemp <- matrix(-1, nrow = nrow(simMatrix), ncol = nrow(simMatrix))
rand <- sample(x = vec, replace = TRUE, size = length(vec))
simTemp[upper.tri(simTemp)] = rand
simTemp <- t(simTemp)
simTemp[upper.tri(simTemp)] = rand
simMatrix <- simTemp
simMatrix
load("~/Dropbox/sdu/clustering/code/parentV3.RData")
require(graphics)
hc <- hclust(dist(USArrests), "ave")
hc$merge <- mergeMatrix
hc$height <- mergeHeights
hc$order <- order
hc$labels <- labels
plot(hc, xlab = "protein", ylab = "threshold")
plot(hc, hang = -1, xlab = "Protein", ylab = "Threshold")
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# library(transclustr)
# library(ggplot2)
# library(plyr)
# library(cluster)
# library(gtools)
# library(ClusterR)
# library(stringi)
#round(x, digits = 0)
source("fmeasure.R")
source("utilities.R")
####################################################################################################
# Read in data and build similarity matrix
####################################################################################################
table <- read.table("sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh.txt", sep = "", skip = 5)
df_table <- as.data.frame(table)
# Get the involved proteins
proteins = levels(df_table[,1])
# Build similarity matrix
simMatrix <- buildSimilarityMatrix(proteins, df_table)
vec <- simMatrix[upper.tri(simMatrix)]
simTemp <- matrix(-1, nrow = length(proteins), ncol = length(proteins))
rand <- sample(x = vec, replace = TRUE, size = length(vec))
simTemp[upper.tri(simTemp)] = rand
simTemp <- t(simTemp)
simTemp[upper.tri(simTemp)] = rand
simMatrix <- simTemp
simMatrix
as.dist(simMatrix)
as.vector(as.dist(simMatrix))
mean(as.vector(as.dist(simMatrix)))
library(transclustr)
library(ggplot2)
library(plyr)
library(cluster)
library(gtools)
library(ClusterR)
library(stringi)
#library(pryr) # get size of objects with object_size(l)
source("fmeasure.R")
source("utilities.R")
####################################################################################################
# Read in data and build similarity matrix
####################################################################################################
table <- read.table("sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh.txt", sep = "", skip = 5)
df_table <- as.data.frame(table)
# Get the involved proteins
proteins = levels(df_table[,1])
# Build similarity matrix
simMatrix <- buildSimilarityMatrix(proteins, df_table)
max(as.dist(simMatrix))
max(as.dist(simMatrix)) - as.dist(simMatrix)
as.dist(simMatrix)
(max(as.dist(simMatrix)) + 1) - as.dist(simMatrix)
hc <- hclust((max(as.dist(simMatrix)) + 1) - as.dist(simMatrix))
plot(hc, xlab = "protein", ylab = "threshold")
plot(hc, hang = -1, xlab = "Protein", ylab = "Threshold")
length(totalClusters$c4$proteins)
length(totalClusters$c5$proteins)
length(totalClusters$c6$proteins)
mean(as.vector(as.dist(simMatrix)))
(max(as.dist(simMatrix)) + 1) - as.dist(simMatrix)
dist((max(as.dist(simMatrix)) + 1) - as.dist(simMatrix))
save.image("~/Dropbox/sdu/clustering/code/meetingWorkspace.RData")
load("~/Dropbox/sdu/clustering/code/meetingWorkspace.RData")
