plotRandomVsOriginalAndPrintToFile <- function() {
ranApproaches <- c(2, 3, 4)
seeds <- c(7, 21, 42, 50)
dimensions = c(2, 3, 4, 5, 10)
for (ra in ranApproaches) {
for (s in seeds) {
for (d in dimensions) {
costPlot <- plotCostsBigOneVsOneWithGap(d, s, ra)
simPlot <- plotHistogramRandomVsOriginalSimilarities(d, s, ra)
fileName <- paste0("plotBigDataCostAndSim-AP", ra, "-S", s, "-K", d, ".pdf")
pdf(fileName)
print(costPlot)
print(simPlot)
dev.off()
}
}
}
}
plotRandomVsOriginalAndPrintToFile()
plotHistogramRandomVsOriginalSimilarities <- function(dimension = 10, seed = 42, randomApproaches = 2) {
colNames <- c("Similarity", "Dataset")
df_plot <- data.frame(similarity = integer(0), dataset = character())
# Read in Original data
table <- read.table("./data/big/simBig.txt", sep = "")
df_table <- as.data.frame(table)
proteins = levels(df_table[,1])
simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table) # Big data
rows <- length(proteins)^2
df_plot <- as.data.frame(cbind(as.vector(simMatrix), rep("Original", rows)))
names(df_plot) <-  colNames
# Read in Random
if (randomApproaches == 2) {
simRandom <- buildRandomSimMatrixAp2(proteins, simMatrix, dimension, seed)
df_randomSim <- as.data.frame(cbind(as.vector(simRandom), rep("Random", rows)))
names(df_randomSim) <- colNames
df_plot <- rbind(df_plot, df_randomSim)
}
if (randomApproaches == 3) {
simRandom <- buildRandomSimMatrixAp3(proteins, simMatrix, dimension, seed)
df_randomSim <- as.data.frame(cbind(as.vector(simRandom), rep("Random", rows)))
names(df_randomSim) <- colNames
df_plot <- rbind(df_plot, df_randomSim)
}
if (randomApproaches == 4) {
simRandom <- buildRandomSimMatrixAp4(proteins, simMatrix, dimension, seed)
df_randomSim <- as.data.frame(cbind(as.vector(simRandom), rep("Random", rows)))
names(df_randomSim) <- colNames
df_plot <- rbind(df_plot, df_randomSim)
}
df_plot[,1] <- as.numeric(as.character(df_plot[,1]))
g <- ggplot(data = df_plot, aes(x = Similarity, fill = Dataset)) +
geom_histogram(binwidth = 10,
position = "identity", colour = "black", boundary = 0) +
scale_x_continuous(name = "Similarity", breaks = seq(0, max(df_plot$Similarity)+20, 20)) +
scale_y_log10(name = "Frequency", labels=function(n){format(n, scientific = FALSE)}) +
ggtitle("Frequency of similarities") +
theme_bw() +
theme(axis.line = element_line(size=1, colour = "black"),
panel.grid.major = element_line(colour = "#d3d3d3"),
panel.grid.minor = element_blank(),
panel.border = element_blank(), panel.background = element_blank(),
axis.text.x=element_text(colour="black", size = 9, angle = 90),
axis.text.y=element_text(colour="black", size = 9),
legend.position = "none") +
facet_grid(. ~Dataset , scales = "free")
return(g)
}
plotRandomVsOriginalAndPrintToFile()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("AP", ap, "outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,2]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(5000, 100000, 5000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,2]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(5000, 100000, 5000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(5000, 100000, 5000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(5000, 10000, 5000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(5000, 10000, 5000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(5000, 10000, 5000)) +
ggtitle(title)
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(5000, 10000, 5000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
# scale_y_continuous(breaks = seq(5000, 10000, 5000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(5000, 100000, 5000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
# scale_y_continuous(breaks = seq(5000, 100000, 5000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(200000, 500000, 50000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(200000, 500000, 10000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost, colour = seed)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(200000, 500000, 20000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
plotCostsFromOutputFileSmall <- function() {
approaches <- c(2)
seeds <- c(42)
dimensions <- seq(5, 100, 5)
for (ap in approaches) {
df_plot <- data.frame(dimension = integer(0), cost = integer(0), seed = integer(0))
for (s in seeds) {
for (dim in dimensions) {
path <- paste0("./randomSmallAp2/")
fileName <- paste0("outputRandomSmallData-S", s, "-K", dim, ".txt")
file <- paste0(path, fileName)
print(file)
df <- read.table(file, sep = "", skip = 1)
df_plot <- rbind(df_plot, data.frame(dimension = dim, cost = max(df[,19]), seed = s))
}
}
title <- paste0("Maximum cost for the randomized small dataset | Approach ", ap)
df_plot[,3] <- as.factor(df_plot[,3])
g <- ggplot(data = df_plot, aes(x = dimension, y = cost)) +
geom_line(linetype = "solid") +
scale_x_continuous(breaks = dimensions) +
scale_y_continuous(breaks = seq(200000, 500000, 20000)) +
ggtitle("Small dataset")
plotFileName <- paste0("plotCostsRandomSmallData-Ap", ap, ".pdf")
pdf(plotFileName)
print(g)
dev.off()
}
}
plotCostsFromOutputFileSmall()
foldchange(1, 2)
foldchange(1, 1.1)
foldchange(2, 2.1)
foldchange(2, 2)
step <- 5 # Default step for threshold. Binary search is skipped if 'step <- 1'. 30 is used for the binary split
minSplit <- 5 # Minimum number of splits. Minimum bound will increase if splits are < 2
maxSplit <- 10 # Maximum number of splits. Upper bound will decrease if splits are >= maxSplit.
readSmallDataSet <- TRUE
readBigDataSet <- !readSmallDataSet
DEBUG <- FALSE
if (readSmallDataSet) {
table <- read.table("./data/brown/sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh.txt", sep = "", skip = 5)
df_table <- as.data.frame(table)
proteins = levels(df_table[,1])
simMatrix <- buildSimilarityMatrix(proteins, df_table)
minThreshold <- min(simMatrix) - 1 # The starting threshold. -1 such that the first run returns 1 cluster.
maxThreshold <- round(max(simMatrix)) + 1 # Threshold where all clusters will be singletons
if (DEBUG) { fileName <- "hcSmallData" }
}
hc <- hclust((max(as.dist(simMatrix)) + 1) - as.dist(simMatrix))
plot(hc, xlab = "protein", ylab = "threshold")
plot(hc, hang = -1, xlab = "Protein", ylab = "Threshold")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("utilities.R")
