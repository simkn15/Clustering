choose(6,5)
library(transclustr)
library(ggplot2)
library(plyr)
?tclust
?kmeans
file <- file("yolo.txt", "w")
write("hej", file, append = TRUE)
close(file)
file <- file("yolo.txt", "w")
write("hej", file, append = TRUE)
close(file)
?knn
library(naivebayes)
library(class)
?knn
?cov
x <- c(1,2,3,4)
c <- cov(swiss)
c
swiss
?log
log(10)
log2(10)
log10(10)
log10(4)
log2(4)
log(4)
table <- read.table("./data/big/blast_original.txt", sep = "")
df_table <- as.data.frame(table)
df_table <- df_table[,c(1,2,11)]
table <- df_table
for (i in 1:nrow(df_table)) {
if (table[i,3] != 0) {
table[i,3] <- -log(table[i,3])
}
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
table <- read.table("./data/big/blast_original.txt", sep = "")
df_table <- as.data.frame(table)
df_table <- df_table[,c(1,2,11)]
table <- df_table
for (i in 1:nrow(df_table)) {
if (table[i,3] != 0) {
table[i,3] <- -log10(table[i,3])
}
}
head(table)
max(table[,3])
mean(table[,3])
min(table[,3])
table <- read.table("./data/big/blast_original.txt", sep = "")
df_table <- as.data.frame(table)
df_table <- df_table[,c(1,2,11)]
table <- df_table
for (i in 1:nrow(df_table)) {
if (table[i,3] != 0) {
table[i,3] <- -log(table[i,3])
}
}
max(table[,3])
mean(table[,3])
min(table[,3])
table10 <- read.table("./data/big/blast_original.txt", sep = "")
df_table <- as.data.frame(table)
df_table <- df_table[,c(1,2,11)]
table10 <- df_table
for (i in 1:nrow(df_table)) {
if (table10[i,3] != 0) {
table10[i,3] <- -log10(table10[i,3])
}
}
table10 <- read.table("./data/big/blast_original.txt", sep = "")
df_table <- as.data.frame(table10)
df_table <- df_table[,c(1,2,11)]
table10 <- df_table
for (i in 1:nrow(df_table)) {
if (table10[i,3] != 0) {
table10[i,3] <- -log10(table10[i,3])
}
}
proteins <- levels(table[,1])
simMatrix <- buildSimilarityMatrix(proteins, table)
buildSimilarityMatrixFromBlast <- function(proteins, df_table) {
if (length(proteins) < 2) { stop("Cannot build similarity matrix with less than 2 proteins")}
# Create an empty matrix
simMatrix = matrix(0, nrow = length(proteins), ncol = length(proteins))
# Set row and column names for readability
row.names(simMatrix) = proteins
colnames(simMatrix) = proteins
# Extract the pairwise similarities
for(x in 1:(length(proteins)-1)){
# Select all rows containing p1
p1 = proteins[x]
presec = df_table[df_table[,1] == p1 | df_table[,2] == p1, ]
for(y in (x+1):length(proteins)){
p2 = proteins[y]
# We have to check for both directions p1 -> p2 and p2 <- p1. Rule is, to be more conservative, we take the minimum of both values
d1.set <- presec[presec[,1] == p2, 3]
d2.set <- presec[presec[,2] == p2, 3]
d1.length <- length(presec[presec[,1] == p2, 3])
d2.length <- length(presec[presec[,2] == p2, 3])
if (d1.length == 0 | d2.length == 0){
#Allright, one value was missing, we take 0 as fallback (since there is no meaningful minimum)
simMatrix[x,y] = simMatrix[y,x] = 0
}else{
#Take the minimum of both directions
d1.maxValue <- 0
d2.maxValue <- 0
for (i in 1:d1.length) { # find d1.maxValue
if (d1.set[i] > d1.maxValue) {
d1.maxValue <- d1.set[i]
}
}
for (i in 1:d2.length) { # find d2.maxValue
if (d2.set[i] > d2.maxValue) {
d2.maxValue <- d2.set[i]
}
}
simMatrix[x,y] = simMatrix[y,x] = min(d1.maxValue, d2.maxValue)
}
}
}
# Set the diagonal to the highest observed value (not actually necessary, since self-similarity is never queried)
# diag(simMatrix) = max(simMatrix)
return(simMatrix)
}
simMatrix <- buildSimilarityMatrix(proteins, table)
simMatrix <- buildSimilarityMatrixFromBlast(proteins, table)
simMatrix10 <- buildSimilarityMatrixFromBlast(proteins, table10)
max(simMatrix)
max(simMatrix10)
mean(simMatrix10)
min(simMatrix10)
mean(simMatrix)
min(simMatrix)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("utilities.R")
source("hclustDivisive.R")
source("hcGap.R")
library(reshape)
step <- 1 # Default step for threshold. Binary search is skipped if 'step <- 1'. 30 is used for the binary split
minSplit <- 5 # Minimum number of splits. Minimum bound will increase if splits are < 2
maxSplit <- 10 # Maximum number of splits. Upper bound will decrease if splits are >= maxSplit.
readSmallDataSet <- TRUE
readBigDataSet <- !readSmallDataSet
DEBUG <- FALSE
table <- read.table("./data/big/simBig.txt", sep = "")
df_table <- as.data.frame(table)
proteins = levels(df_table[,1])
simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table)
max(simMatrix)
mean(simMatrix)
min(simMatrix)
?cmdscale
load("~/Dropbox/sdu/clustering/code/workspacesHcGap/hcGapBigDataAp3Step1K5Seed7NoBinary.RData")
gap
hc$gap
gap <- hc$gap
load("~/Dropbox/sdu/clustering/code/workspacesHcGap/hcGapBigDataAp3Step1K5Seed21NoBinary.RData")
gap
any(hc$gap[,3] != gap[,3])
gap[,2] <- gap[,2] + hc$gap[,2]
gap
head(hc$gap)
head(gap)
# Main file for running hierarchical clustering methods.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("utilities.R")
source("hclustDivisive.R")
source("hcGap.R")
library(reshape)
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, actual = costDiff, avg = costDiffScaledAverage, avgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : actual vs. randomized")
g <- ggplot() +
labs(col = "Variable:") +
scale_x_continuous(name = "Threshold", breaks = seq(0, max(df_plot[,1]), 20)) +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 1)}, breaks = c(0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000)) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ggtitle(title)
g <- add_sub(g, "Black point on foldChange is conversion from negative to positive.")
return(g)
}
####################################################################################################
# Read in data and build similarity matrix
# hclust
####################################################################################################
# Adjust variables to desired bounds for binary search
# The binary search uses a upperBound and a lowerBound to find the proper threshold in the current iteration.
# randomApproaches <- c(3, 4)
# seeds <- c(7, 21, 42)
# minSplit <- 2 # Minimum number of splits. Minimum bound will increase if splits are < 2
# maxSplit <- 10 # Maximum number of splits. Upper bound will decrease if splits are >= maxSplit.
#
# table <- read.table("./data/brown/sfld_brown_et_al_amidohydrolases_protein_similarities_for_beh.txt", sep = "", skip = 5)
# df_table <- as.data.frame(table)
# proteins = levels(df_table[,1])
# simMatrix <- buildSimilarityMatrix(proteins, df_table)
# minThreshold <- min(simMatrix) - 1 # The starting threshold. -1 such that the first run returns 1 cluster.
# maxThreshold <- round(max(simMatrix)) + 1 # Threshold where all clusters will be singletons
#
# steps <- c(1, 5)
# for (step in steps) {
#     for (seed in seeds) {
#         for (ap in randomApproaches) {
#             print(paste0("Doing ap ", ap, " no binary on small data"))
#             hc <- hclustDivisiveGap(simMatrix, proteins, step, minSplit, maxSplit, minThreshold, maxThreshold, binarySearch = FALSE, GAP = TRUE, dimensions = 5, seed = seed, randomAp = ap)
#             g <- plotCostDifference(hc$gap)
#             ggdraw(g)
#             fileName <- paste0("plotCostGapSmallDataAp", ap, "Step", step, "K5Seed", seed, "NoBinary.pdf")
#             workspaceName <- paste0("hcGapSmallDataAp", ap, "Step", step, "K5Seed", seed, "NoBinary.RData")
#             pdf(fileName)
#             print(ggdraw(g))
#             dev.off()
#             save.image(workspaceName)
#         }
#     }
# }
#
# steps <- c(30)
# for (step in steps) {
#     for (seed in seeds) {
#         for (ap in randomApproaches) {
#             print(paste0("Doing ap ", ap, " binary on small data"))
#             hc <- hclustDivisiveGap(simMatrix, proteins, step, minSplit, maxSplit, minThreshold, maxThreshold, binarySearch = TRUE, GAP = TRUE, dimensions = 5, seed = seed, randomAp = ap)
#             g <- plotCostDifference(hc$gap)
#             ggdraw(g)
#             fileName <- paste0("plotCostGapSmallDataAp", ap, "Step", step, "KS5eed", seed, "Binary.pdf")
#             workspaceName <- paste0("hcGapSmallDataAp", ap, "Step", step, "K5Seed", seed, "Binary.RData")
#             pdf(fileName)
#             print(ggdraw(g))
#             dev.off()
#             save.image(workspaceName)
#         }
#     }
# }
#
#
# table <- read.table("./data/big/simBig.txt", sep = "")
# df_table <- as.data.frame(table)
# proteins = levels(df_table[,1])
# simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table)
# minThreshold <- min(simMatrix) - 1
# maxThreshold <- round(max(simMatrix)) + 1
#
# steps <- c(1, 5)
# for (step in steps) {
#     for (seed in seeds) {
#         for (ap in randomApproaches) {
#             print(paste0("Doing ap ", ap, " no binary on big data"))
#             hc <- hclustDivisiveGap(simMatrix, proteins, step, minSplit, maxSplit, minThreshold, maxThreshold, binarySearch = FALSE, GAP = TRUE, dimensions = 5, seed = seed, randomAp = ap)
#             g <- plotCostDifference(hc$gap)
#             ggdraw(g)
#             fileName <- paste0("plotCostGapBigDataAp", ap, "Step", step, "K5Seed", seed, "NoBinary.pdf")
#             workspaceName <- paste0("hcGapBigDataAp", ap, "Step", step, "K5Seed", seed, "NoBinary.RData")
#             pdf(fileName)
#             print(ggdraw(g))
#             dev.off()
#             save.image(workspaceName)
#         }
#     }
# }
#
#
# steps <- c(30)
# for (step in steps) {
#     for (seed in seeds) {
#         for (ap in randomApproaches) {
#             print(paste0("Doing ap ", ap, " binary on big data"))
#             hc <- hclustDivisiveGap(simMatrix, proteins, step, minSplit, maxSplit, minThreshold, maxThreshold, binarySearch = TRUE, GAP = TRUE, dimensions = 5, seed = seed, randomAp = ap)
#             g <- plotCostDifference(hc$gap)
#             ggdraw(g)
#             fileName <- paste0("plotCostGapBigDataAp", ap, "Step", step, "K5Seed", seed, "Binary.pdf")
#             workspaceName <- paste0("hcGapBigDataAp", ap, "Step", step, "K5Seed", seed, "Binary.RData")
#             pdf(fileName)
#             print(ggdraw(g))
#             dev.off()
#             save.image(workspaceName)
#         }
#     }
# }
step <- 1 # Default step for threshold. Binary search is skipped if 'step <- 1'. 30 is used for the binary split
minSplit <- 5 # Minimum number of splits. Minimum bound will increase if splits are < 2
maxSplit <- 10 # Maximum number of splits. Upper bound will decrease if splits are >= maxSplit.
readSmallDataSet <- FALSE
readBigDataSet <- !readSmallDataSet
DEBUG <- FALSE
table <- read.table("./data/big/simBig.txt", sep = "")
df_table <- as.data.frame(table)
proteins = levels(df_table[,1])
simMatrix <- buildSimilarityMatrixFromBlast(proteins, df_table)
hc <- hclust((max(as.dist(simMatrix)) + 1) - as.dist(simMatrix))
plot(hc, xlab = "protein", ylab = "threshold")
plot(hc, hang = -1)
866/232
data.frame(h = integer(0))
x <- data.frame(h = integer(0))
x <- rbind(x, data.frame(x = 9))
x <- rbind(x, data.frame(x = 10))
x
x[,1] / 2
x[,1] <- x[,1] / 2
x
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("utilities.R")
source("hclustDivisive.R")
source("hcGap.R")
library(reshape)
plotCostDifference <- function(gap) {
thresholds <- unique(gap$threshold)
df_plot <- data.frame(threshold = integer(0), costDiff = integer(0), costDiffScaledAverage = integer(0), costDiffScaledPairs = integer(0), foldChange = integer(0))
for (i in 1:length(thresholds)) {
t <- thresholds[i]
rows <- gap[gap$threshold == t,]
sumCostOriginal <- 0
sumCostRandom <- 0
sumNumberOfProteins <- 0
for (row in 1:nrow(rows)) {
sumCostOriginal <- sumCostOriginal + rows[row,]$costOriginal
sumCostRandom <- sumCostRandom + rows[row,]$costRandom
sumNumberOfProteins <- sumNumberOfProteins + rows[row,]$numberOfProteins
}
costDiff <- abs(sumCostRandom - sumCostOriginal)
costDiffScaledAverage <- costDiff / sumNumberOfProteins
costDiffScaledPairs <- costDiff / ((sumNumberOfProteins * (sumNumberOfProteins - 1)) / 2)
if (sumCostOriginal == 0 || sumCostRandom == 0) {
foldChange <- 0
}
else {
foldChange <- foldchange(sumCostRandom, sumCostOriginal)
}
# Change variable names
df <- data.frame(threshold = t, actual = costDiff, avg = costDiffScaledAverage, avgPairs = costDiffScaledPairs, foldChange = foldChange)
df_plot <- rbind(df_plot, df)
}
df_plot <- melt(df_plot, id="threshold")
negativeFoldChange <- which(df_plot[,3] < 0)
for (i in 1:nrow(df_plot)) {
if (df_plot[i,]$value == 0) {
df_plot[i,]$value <- 0.001
}
if (df_plot[i,]$value < 0 && df_plot[i,]$variable == "foldChange") {
df_plot[i,]$value <- abs(df_plot[i,]$value)
}
}
title <- paste0("Cost difference : actual vs. randomized")
g <- ggplot() +
labs(col = "Variable:") +
scale_x_continuous(name = "Threshold", breaks = seq(0, max(df_plot[,1]), 20)) +
scale_y_continuous(name = "Cost", trans='log2', labels=function(n){format(n, scientific = FALSE, digits = 1)}, breaks = c(0.001, 0.01, 0.1, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000)) +
geom_line(data = df_plot, aes(x = threshold, y = value, colour = variable)) +
geom_point(data = df_plot[negativeFoldChange,], aes(x = threshold, y = value)) +
theme(legend.position = "bottom", axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
ggtitle(title)
g <- add_sub(g, "Black point on foldChange is conversion from negative to positive.")
return(g)
}
load("~/Dropbox/sdu/clustering/code/workspacesHcGap/ap3SmallData/hcGapSmallDataAp3Step1K5Seed7NoBinary.RData")
gap <- hc$gap
load("~/Dropbox/sdu/clustering/code/workspacesHcGap/ap3SmallData/hcGapSmallDataAp3Step1K5Seed21NoBinary.RData")
gap[,2] <- gap[,2] + hc$gap[,2]
head(gap)
head(hc$gap)
load("~/Dropbox/sdu/clustering/code/workspacesHcGap/ap3SmallData/hcGapSmallDataAp3Step1K5Seed42NoBinary.RData")
gap[,2] <- gap[,2] + hc$gap[,2]
head(hc$gap)
head(gap)
load("~/Dropbox/sdu/clustering/code/workspacesHcGap/ap3SmallData/hcGapSmallDataAp3Step5K5Seed7NoBinary.RData")
gap[,2] <- gap[,2] + hc$gap[,2]
nrow(gap)
nrow(hc$gap)
hc$gap
gap
?cmdscale
?hclust
