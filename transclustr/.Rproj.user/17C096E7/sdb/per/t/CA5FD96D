{
    "collab_server" : "",
    "contents" : "tclust_params <- function(){\n   list(\n      sim_fallback        = 0.0,\n\n      th_min              = 0.0,\n      th_max              = 100,\n      th_step             = 1.0,\n\n      p                   = 1.0,\n      f_att               = 100.0,\n      f_rep               = 100.0,\n      R                   = 100,\n      dim                 = 3,\n      start_t             = 100,\n\n      d_init              = 0.01,\n      d_maximal           = 5.0,\n      s_init              = 0.01,\n      f_s                 = 0.01,\n\n      fpt_time_limit      = 0.1,\n      fpt_max_cost        = 1000,\n      fpt_step_size       = 500,\n\n      disable_force       = FALSE,\n      disable_fpt         = FALSE,\n\n      seed                = 42\n   )\n}\n#'tclust\n#'@examples\n#'library(transclustr)\n#'library(ggplot2)\n#'\n#'# Variables\n#'SD <- 1\n#'CLUSTER_SIZE <- 50\n#'THRESHOLD = 15\n#'\n#'################################################################################\n#'# Genereate some test data\n#'################################################################################\n#'a <- cbind(rnorm(CLUSTER_SIZE, mean = 10, sd = SD), rnorm(n  =CLUSTER_SIZE,  mean = 10,sd = SD))\n#'b <- cbind(rnorm(CLUSTER_SIZE, mean = 0,  sd = SD),  rnorm(n =CLUSTER_SIZE, mean = 10,sd = SD))\n#'c <- cbind(rnorm(CLUSTER_SIZE, mean = 10, sd = SD), rnorm(n  =CLUSTER_SIZE,  mean = 0, sd = SD))\n#'d <- cbind(rnorm(CLUSTER_SIZE, mean = 0,  sd = SD),  rnorm(n =CLUSTER_SIZE, mean = 0, sd = SD))\n#'set <- rbind(a,b,c,d)\n#'df_set <- as.data.frame(set)\n#'names(df_set) <- c(\"x\",\"y\")\n#'\n#'################################################################################\n#'# Draw the test data\n#'################################################################################\n#'ggplot(data=df_set,aes(x=x,y=y)) +\n#'   geom_point() +\n#'   coord_fixed() +\n#'   ggtitle(\"Test Data\")\n#'\n#'################################################################################\n#'# Create a dist object from the test data\n#'################################################################################\n#'dist_set <- dist(set)\n#'\n#'################################################################################\n#'# Cluster using tclust\n#'################################################################################\n#'start.time <- Sys.time()\n#'tclust_res<- tclust(dist_set, threshold = THRESHOLD)\n#'end.time <- Sys.time()\n#'time.taken <- end.time - start.time\n#'\n#'################################################################################\n#'# Draw the result\n#'################################################################################\n#'set_res <- as.data.frame(cbind(set,tclust_res$clusters[[1]]))\n#'names(set_res) <- c(\"x\",\"y\",\"cluster\")\n#'find_hull <- function(df) df[chull(df$x, df$y), ]\n#'hulls <- ddply(set_res, \"cluster\", find_hull)\n#'print(ggplot(data=as.data.frame(set_res),aes(x=x,y=y,colour=factor(cluster),fill=factor(cluster))) +\n#'         geom_point() +\n#'         theme(legend.position = \"none\") +\n#'         coord_fixed() +\n#'         geom_polygon(data = hulls,alpha = 0.25) +\n#'         ggtitle(paste(\"Threshold:\",THRESHOLD,\" Cost:\",tclust_res$costs[[1]],\"Time:\",time.taken,\"s\"))\n#')\n#'@export\ntclust <- function(\n   dist_obj = NULL,\n   filename = NULL,\n   simmatrix = NULL,\n   threshold = NULL,\n   convert_dissimilarity_to_similarity = TRUE,\n   file_type = \"SIMPLE\",\n\n   sim_fallback        = 0.0,\n\n   th_min              = 0.0,\n   th_max              = 100,\n   th_step             = 1.0,\n\n   p                   = 1.0,\n   f_att               = 100.0,\n   f_rep               = 100.0,\n   R                   = 100,\n   dim                 = 3,\n   start_t             = 100,\n\n   d_init              = 0.01,\n   d_maximal           = 5.0,\n   s_init              = 0.01,\n   f_s                 = 0.01,\n\n   fpt_time_limit      = 20,\n   fpt_max_cost        = 5000,\n   fpt_step_size       = 10,\n   disable_force       = FALSE,\n   disable_fpt         = FALSE,\n\n   seed                = 42\n)\n{\n\n   if(is.null(threshold)){\n      stop(\"A threshold must be given\")\n   }\n\n   params <- tclust_params()\n   params$sim_fallback           = sim_fallback\n   params$threshold              = threshold\n   params$p                      = p\n   params$f_att                  = f_att\n   params$f_rep                  = f_rep\n   params$R                      = R\n   params$dim                    = dim\n   params$start_t                = start_t\n   params$d_init                 = d_init\n   params$d_maximal              = d_maximal\n   params$s_init                 = s_init\n   params$f_s                    = f_s\n   params$fpt_time_limit         = fpt_time_limit\n   params$fpt_max_cost           = fpt_max_cost\n   params$fpt_step_size          = fpt_step_size\n   params$disable_force          = disable_force\n   params$disable_fpt            = disable_fpt\n   params$seed                   = seed\n\n   # if all input arguments are NULL\n   if(is.null(filename) && is.null(simmatrix) && is.null(dist_obj)){\n      stop(\"Either a file, similarity matrix or dist object needed\")\n   }\n\n   if(!is.null(filename)){\n      ##########################################################################\n      # FILE\n      ##########################################################################\n      if(!file.exists(filename)){\n         stop(\"could not find file\")\n      }\n      # file path must be absolute\n      filename <- tools::file_path_as_absolute(filename)\n\n      res <- cppTransClustFile(\n         filename,\n         file_type,\n         params\n      )\n   }else if(!is.null(dist_obj)){\n      ##########################################################################\n      # DIST OBJECT\n      ##########################################################################\n\n      # convert dissimilarity to similarity\n      if(convert_dissimilarity_to_similarity){\n         dist_obj <- max(dist_obj) - dist_obj\n         #d <- max(as.vector(dist_obj))-as.vector(dist_obj)\n      }\n\n      res <- cppTransClustDist(\n         as.vector(dist_obj),\n         as.numeric(attr(dist_obj,\"Size\")),\n         params\n      )\n\n   }else if(!is.null(simmatrix)){\n      print(\"bla\")\n      ##########################################################################\n      # SIMILARITY MATRIX\n      ##########################################################################\n      dist_obj <- as.dist(simmatrix)\n      # convert dissimilarity to similarity\n      if(convert_dissimilarity_to_similarity){\n         d <- max(as.vector(dist_obj))-as.vector(dist_obj)\n      }else{\n         d <- as.vector(dist_obj)\n      }\n      res <- cppTransClustDist(\n         d,\n         as.numeric(attr(dist_obj,\"Size\")),\n         params\n      )\n   }\n   res\n}\n\n",
    "created" : 1487001376711.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4166429404",
    "id" : "CA5FD96D",
    "lastKnownWriteTime" : 1487001270,
    "last_content_update" : 1487001270,
    "path" : "~/imada/research/transclust.cpp/transclustr/R/transclustr.R",
    "project_path" : "R/transclustr.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}